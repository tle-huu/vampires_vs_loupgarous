**********************
VAMPIRES Vs WEREWOLVES
**********************

Command line to launch the client, default values for each parameter are precised between brackets (please just fill the host and port):
.\bin\Twilight <host = 127.0.0.1> <port = 5555> <pseudo = Towelie> <max_depth = 4> <action_method = 4> <max_groups = 3>

The whole "Twilight" project is written in C++, and generated with Microsoft Visual Studio 2017.


STRUCTURE OF THE CODE

The game is represented by classes:
 - a Group (in Group.h) is a number of vampires/werewolves/humans at a certain Point (in Point.h) of the map, it can also be a random battle between two groups
 - an Action is a list of Moves (in Action.h) to represent a possible turn of a player
 - a Map (in Map.h) holds the information about every Group in the map at a current state of the game
 - a State (in State.h) contains a Map, the player's turn, its probability if it was generated by a random battle

The implementation of the Map interface used is MapGrid, holding a 2D array of structures containing the information about a Point in the map.


NEXT STATES GENERATION

In order to drastically reduce the number of possible actions a player can make at a current state of the game, and thus increase the depth of the game tree explored by the algorithm, 
no more than 9 customized actions per friendly group are generated (often less) by the actions_customized method of State object according to the current state of the game.
The maximum number of friendly groups that this method can generate is also limited, still in order to reduce the complexity.


ALGORITHM

The algorithm used is the expect Minimax with alpha-beta pruning (expect_minimax_alphabeta) in minimax.h header file. 
The method uses an object Chrono (in Chrono.h) to interrupt the exploration of the game by the algorithm in case the time spent for a turn reaches the 2 seconds limit.

The algorithm also adapts its strategy to the opponent by speculating the maximum number of groups the opponent algorithm is allowed to split into.
It makes the algorithm very strong against opponents who don't split.

All these techniques allows the algorithm to have a maximum depth of 4 and spliting into maximum 3 groups.
